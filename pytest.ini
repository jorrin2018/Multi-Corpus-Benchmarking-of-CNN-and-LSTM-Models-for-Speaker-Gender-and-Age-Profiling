[tool:pytest]
# Configuración de pytest para el proyecto Speaker Profiling
# Define comportamiento de tests y cobertura de código

# Directorios de tests
testpaths = tests

# Patrones de archivos de test
python_files = test_*.py *_test.py

# Patrones de clases de test
python_classes = Test*

# Patrones de funciones de test
python_functions = test_*

# Marcadores de tests
markers =
    slow: marca tests que tardan mucho tiempo en ejecutarse
    integration: tests de integración que requieren recursos externos
    performance: tests de rendimiento y benchmarking
    unit: tests unitarios básicos
    gpu: tests que requieren GPU
    dataset: tests que requieren datasets reales
    reproduction: tests de reproducibilidad científica

# Opciones de output
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --color=yes
    --durations=10
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --junitxml=pytest-results.xml

# Configuración de cobertura
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */.*

[coverage:report]
# Fallar si la cobertura está por debajo del umbral
fail_under = 80

# Excluir líneas de la cobertura
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Mostrar líneas faltantes
show_missing = True

# Precisión de porcentajes
precision = 2

[coverage:html]
directory = htmlcov
title = Speaker Profiling Coverage Report

[coverage:xml]
output = coverage.xml

# Configuración de warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Ignorar warnings específicos de bibliotecas
    ignore:.*deprecated.*:DeprecationWarning:torch.*
    ignore:.*deprecated.*:DeprecationWarning:torchvision.*
    ignore:.*deprecated.*:DeprecationWarning:librosa.*

# Variables de entorno para tests
env = 
    PYTHONPATH = {toxinidir}
    TESTING = 1

# Timeouts para tests
timeout = 300
timeout_method = thread

# Configuración de logging durante tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Archivos temporales para tests
tmp_path_retention_count = 3
tmp_path_retention_policy = all

# Configuración de parallel execution (si se usa pytest-xdist)
# addopts = -n auto 